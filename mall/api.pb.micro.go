// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mall/api.proto

package mall

import (
	fmt "fmt"
	_ "github.com/kkangxu/himlad-proto/base"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Mall service

func NewMallEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Mall service

type MallService interface {
	GetProducts(ctx context.Context, in *ReqGetProducts, opts ...client.CallOption) (*RspGetProducts, error)
}

type mallService struct {
	c    client.Client
	name string
}

func NewMallService(name string, c client.Client) MallService {
	return &mallService{
		c:    c,
		name: name,
	}
}

func (c *mallService) GetProducts(ctx context.Context, in *ReqGetProducts, opts ...client.CallOption) (*RspGetProducts, error) {
	req := c.c.NewRequest(c.name, "Mall.GetProducts", in)
	out := new(RspGetProducts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mall service

type MallHandler interface {
	GetProducts(context.Context, *ReqGetProducts, *RspGetProducts) error
}

func RegisterMallHandler(s server.Server, hdlr MallHandler, opts ...server.HandlerOption) error {
	type mall interface {
		GetProducts(ctx context.Context, in *ReqGetProducts, out *RspGetProducts) error
	}
	type Mall struct {
		mall
	}
	h := &mallHandler{hdlr}
	return s.Handle(s.NewHandler(&Mall{h}, opts...))
}

type mallHandler struct {
	MallHandler
}

func (h *mallHandler) GetProducts(ctx context.Context, in *ReqGetProducts, out *RspGetProducts) error {
	return h.MallHandler.GetProducts(ctx, in, out)
}
