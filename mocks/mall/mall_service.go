// Code generated by mockery v2.9.4. DO NOT EDIT.

package mall

import (
	context "context"

	client "github.com/asim/go-micro/v3/client"

	mall "github.com/kkangxu/himlad-proto/mall"

	mock "github.com/stretchr/testify/mock"
)

// MallService is an autogenerated mock type for the MallService type
type MallService struct {
	mock.Mock
}

// GetProducts provides a mock function with given fields: ctx, in, opts
func (_m *MallService) GetProducts(ctx context.Context, in *mall.ReqGetProducts, opts ...client.CallOption) (*mall.RspGetProducts, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mall.RspGetProducts
	if rf, ok := ret.Get(0).(func(context.Context, *mall.ReqGetProducts, ...client.CallOption) *mall.RspGetProducts); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mall.RspGetProducts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mall.ReqGetProducts, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
