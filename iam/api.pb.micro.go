// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iam/api.proto

package iam

import (
	fmt "fmt"
	_ "github.com/kkangxu/himlad-proto/base"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Iam service

func NewIamEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Iam service

type IamService interface {
	GetUser(ctx context.Context, in *ReqGetUser, opts ...client.CallOption) (*RspGetUser, error)
}

type iamService struct {
	c    client.Client
	name string
}

func NewIamService(name string, c client.Client) IamService {
	return &iamService{
		c:    c,
		name: name,
	}
}

func (c *iamService) GetUser(ctx context.Context, in *ReqGetUser, opts ...client.CallOption) (*RspGetUser, error) {
	req := c.c.NewRequest(c.name, "Iam.GetUser", in)
	out := new(RspGetUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Iam service

type IamHandler interface {
	GetUser(context.Context, *ReqGetUser, *RspGetUser) error
}

func RegisterIamHandler(s server.Server, hdlr IamHandler, opts ...server.HandlerOption) error {
	type iam interface {
		GetUser(ctx context.Context, in *ReqGetUser, out *RspGetUser) error
	}
	type Iam struct {
		iam
	}
	h := &iamHandler{hdlr}
	return s.Handle(s.NewHandler(&Iam{h}, opts...))
}

type iamHandler struct {
	IamHandler
}

func (h *iamHandler) GetUser(ctx context.Context, in *ReqGetUser, out *RspGetUser) error {
	return h.IamHandler.GetUser(ctx, in, out)
}
